if(is.numeric(n) == F){
print("Variable must be NUMERIC")
break
}
if(n <= 0){
print("Variable must at least 1")
break
}
if(n == 1){
return(1)
}else if(n == 2){
return(c(1,1))
}else{
fibo <- rep(0,n)
fibo[1] <- 1
fibo[2] <- 1
for(i in 3:n){
fibo[i] <- fibo[i-1] + fibo[i-2]
}
return(fibo)
}
}
fibonacci_hsw(1)
fibonacci_hsw(2)
fibonacci_hsw(3)
fibonacci_hsw(10)
fibonacci_hsw(z)
fibonacci_hsw("zz")
fibonacci_hsw <- function(n){
if(is.numeric(n) == F){
print("Variable must be NUMERIC")
break
}
if(n <= 0){
warning("Variable must at least 1")
break
}
if(n == 1){
return(1)
}else if(n == 2){
return(c(1,1))
}else{
fibo <- rep(0,n)
fibo[1] <- 1
fibo[2] <- 1
for(i in 3:n){
fibo[i] <- fibo[i-1] + fibo[i-2]
}
return(fibo)
}
}
fibonacci_hsw("zz")
fibonacci_hsw <- function(n){
try(if(is.numeric(n) == F) stop("Variable must be NUMERIC"))
try(if(n <= 0) stop("Variable must at least 1"))
if(n == 1){
return(1)
}else if(n == 2){
return(c(1,1))
}else{
fibo <- rep(0,n)
fibo[1] <- 1
fibo[2] <- 1
for(i in 3:n){
fibo[i] <- fibo[i-1] + fibo[i-2]
}
return(fibo)
}
}
fibonacci_hsw("zz")
fibonacci_hsw <- function(n){
#try(if(is.numeric(n) == F) stop("Variable must be NUMERIC"))
if(is.numeric(n) == F){
stop("Variable must be NUMERIC")
}
if(n <= 0){
stop("Variable must at least 1")
}
if(n == 1){
return(1)
}else if(n == 2){
return(c(1,1))
}else{
fibo <- rep(0,n)
fibo[1] <- 1
fibo[2] <- 1
for(i in 3:n){
fibo[i] <- fibo[i-1] + fibo[i-2]
}
return(fibo)
}
}
fibonacci_hsw("zz")
fibonacci_hsw(-1)
fibonacci_hsw(100)
fibonacci_hsw(100)[100]
fibonacci_hsw <- function(n){
#try(if(is.numeric(n) == F) stop("Variable must be NUMERIC"))
if(is.numeric(n) == F){
stop("Variable must be NUMERIC")
}
if(n <= 0){
stop("Variable must be at least 1")
}
if(n == 1){
return(1)
}else if(n == 2){
return(c(1,1))
}else{
fibo <- rep(1,n)
for(i in 3:n){
fibo[i] <- fibo[i-1] + fibo[i-2]
}
return(fibo)
}
}
fibonacci_hsw(100)[100]
fibonacci_hsw(100)
fibonacci_hsw(10)
fibo_10 <- fibonacci_hsw(10)
fibo_10
aa <- as.matrix(rexp(1000),100,10)
aa
?as.matrix
aa <- as.matrix(rexp(1000),nrow = 100)
aa
dim(aa)
?rexp
aa <- as.matrix(data = rexp(1000),nrow = 100)
?as.matrix
aa <- matrix(data = rexp(1000),nrow = 100)
dim(aa)
aa <- matrix(data = rexp(10000),nrow = 1000)
aa <- matrix(data = rexp(10000,10),nrow = 1000)
aa <- matrix(data = rexp(10000,0.5),nrow = 1000)
aa <- matrix(data = rexp(10000,0.05),nrow = 1000)
aa
aa_scale <- apply(aa,2,function(x) scale(x))
check1 <- apply(aa_scale,2,mean(x))
check1 <- apply(aa_scale,2,mean
)
check1 <- apply(aa_scale,2,sd)
check1 <- apply(aa_scale,2,mean)
check2 <- apply(aa_scale,2,sd)
c(check1,check2)
var(aa_scale) == cor(aa)
var(aa_scale) - cor(aa)
pr_a <- princomp(aa_scale)
pr_a$scores[,1]
pr_a$loadings
eigen(cor(aa))$values
cumsum(eigen(cor(aa))$values)
eigen(var(aa_scale))$vectors
eigen(var(aa_scale))$vectors[,1]
eigen(var(aa_scale))$vectors[,1] %*% aa_scale
dim(aa_scale)
eigen(var(aa_scale))$vectors[,1] %*% t(aa_scale)
aa_scale %*% eigen(var(aa_scale))$vectors[,1]
c2 <- aa_scale %*% eigen(var(aa_scale))$vectors[,1]
c1 <- pr_a$scores[,1]
c1 == c2
sum((c1 - c2) <= 0.000001)
bool <- c(F,T,F,F,T)
sum(bool)
bool
bool*1
as.factor(bool)
as.factor(bool*1)
a <- c([-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2])
a <- matrix(c(-1,-1,-2,-1,-3,-2,1,1,2,1,3,2),6,2)
a
eigen(cor(a))$values
a <- matrix(c(-1,-1,-2,-1,-3,-2,1,1,2,1,3,2),6,2,byrow=T)
a
eigen(cor(a))$values
eigen(cov(a))$values
eigen(cor(a))$values
eigen(cov(a))$values
princomp(a)
z <- princomp(a)
z$loadings
z$scores
z$scores[,1]
z2 <- z$scores[,1]
z2 %*% t(z2)
t(z2) %*% z
z2
z2 %*% t(z2)
t(z2) %*% z2
sqrt(t(z2) %*% z2)
a <- rnorm(10)
b <- a*4 + rexp(10)
cor(a,b)
b <- a*2 + rnorm(10) + rexp(10)
cor(a,b)
fit.t <- lm(b ~ a)
summary(fit.t)
cor(a,b)^2
(cor(a,b))^2
plot(a,b)
fit.t <- lm(b ~ a)
summary(fit.t)
a <- rnorm(100)
b <- a*2 + rnorm(100) + rexp(100)
fit.t <- lm(b ~ a)
summary(fit.t)
cor(a,b)^2
plot(a,b)
a <- rnorm(100)
b <- a*3 + rnorm(100) + rexp(100)
fit.t <- lm(b ~ a)
summary(fit.t)
cor(a,b)^2
plot(a,b)
setwd("~/Desktop/개인 파일/스터디/Coin Project/data")
require(gtools)
coin_list <- read.csv("coin_handling.csv", stringsAsFactors = F)
dataHandle_with_raw <- function(mdata, label_index, target_index, dataNum){
label <- unique(mdata[,label_index])
mdata2 <- lapply(1:length(label), function(x) mdata[(mdata[,label_index] == label[x]),])
check_dim <- sapply(mdata2,function(x) nrow(x))
mdata3 <- lapply(which(check_dim > dataNum), function(x) mdata[(mdata[,label_index] == label[x]),])
check_dim2 <- sapply(mdata3,function(x) nrow(x))
mdata4 <- lapply(mdata3, function(x) x[1:min(check_dim2), target_index])
mdata5 <- do.call(cbind, mdata4)
colnames(mdata5) <- sapply(mdata3, function(x) x[1,label_index])
return(mdata5)
}
dataHandle_with_raw_fixedNum <- function(mdata, label_index, target_index, dataNum){
label <- unique(mdata[,label_index])
mdata2 <- lapply(1:length(label), function(x) mdata[(mdata[,label_index] == label[x]),])
check_dim <- sapply(mdata2,function(x) nrow(x))
mdata3 <- lapply(which(check_dim > dataNum), function(x) mdata[(mdata[,label_index] == label[x]),])
mdata4 <- lapply(mdata3, function(x) x[1:dataNum, target_index])
mdata5 <- do.call(cbind, mdata4)
colnames(mdata5) <- sapply(mdata3, function(x) x[1,label_index])
return(mdata5)
}
find_corr_afterHandle_raw_MA7 <- function(mdata, choose_lag){
possibleNum <- permutations(n = ncol(mdata), r = 2)
coin_name <- colnames(mdata)
result <- cbind(possibleNum[,1], rep(0, nrow(possibleNum)), possibleNum[,2], rep(0, nrow(possibleNum)), rep(0, nrow(possibleNum)), rep(0, nrow(possibleNum)))
colnames(result) <- c("fixedCoin","fixedCoinName", "lagCoin", "lagCoinName", "lag", "cor")
for(i in 1:nrow(possibleNum)){
coin <- mdata[,possibleNum[i,]]
result[i,2] <- coin_name[possibleNum[i,1]]
result[i,4] <- coin_name[possibleNum[i,2]]
corr_data <- sapply(0:choose_lag, function(x) cor(coin[1:(nrow(coin)-x),1], coin[(x+1):nrow(coin),2]))
j <- 1
while(order(abs(corr_data), decreasing = T)[j] <= 10){
j <- j+1
}
max_index <- order(abs(corr_data), decreasing = T)[j]
#    if(which.max(abs(corr_data)) == 1){
#      max_index <- order(abs(corr_data), decreasing = T)[2]
#    }else{
#      max_index <- which.max(abs(corr_data))
#    }
result[i,5] <- (max_index - 1)
result[i,6] <- corr_data[max_index]
}
return(result)
}
meanEarningRatio <- function(lag_MA7, follow_closed, lagNum, cumNum = 10, buyidx = 8, corr){
#  lag_MA7 <- rev(coin_list3[,22])
#  follow_closed <- rev(coin_list3_closed[,56])
#  lagNum <- 30
#  cumNum <- 10
#  buyidx <- 8
#  corr <- as.numeric(sort_result[2225,6])
lag_MA7 <- rev(lag_MA7)
follow_closed <- rev(follow_closed)
if(corr >= 0){
UD <- ifelse(diff(lag_MA7) > 0 ,1,0)
}else{
UD <- ifelse(diff(lag_MA7) < 0 ,1,0)
}
cumUD <- c(rep(0,(cumNum-1)),sapply(1:(length(UD)-(cumNum-1)), function(x) sum(UD[x:(x+(cumNum-1))])))
series <- lapply(1:(length(cumUD)-2), function(x) cumUD[x:(x+2)])
buy_idx <- (which(sapply(series, function(x) (x[3] == buyidx) & (x[2] == (buyidx-1)))) + 2) + (lagNum - cumNum)
sell_idx <- which(sapply(series, function(x) (x[3] == round(cumNum * (2/3)))))
sell_idx2 <- sapply(1:length(buy_idx), function(x) sell_idx[which(buy_idx[x] < sell_idx)][1]) + 2 + (lagNum - cumNum)
if((sum(is.na(buy_idx)) == 0) && (length(buy_idx) == 1)){
return(list("EarningRatioSum" = 'no_buy', "Buy & Sell Num" = 'no_buy'))
}else if(is.na(sell_idx2[1] > length(follow_closed))){
return(list("EarningRatioSum" = 'no_sell', "Buy & Sell Num" = 'no_sell'))
}else if((sum(is.na(sell_idx2)) != 0) && (length(sell_idx2) == 1)){
return(list("EarningRatioSum" = 'no_sell', "Buy & Sell Num" = 'no_sell'))
}else if((sum(is.na(sell_idx2)) != 0)){
idx <- na.replace(sell_idx2, -1)
buy_idx <- buy_idx[which(idx != -1)]
sell_idx2 <- idx[which(idx != -1)]
buy_price <- follow_closed[buy_idx]
sell_price <- follow_closed[sell_idx2]
EarningRatioSum <- cumsum(sapply(1:length(buy_price), function(x) ((sell_price[x] - buy_price[x]) / buy_price[x]) * 100))[length(buy_price)]
return(list("EarningRatioSum" = EarningRatioSum, "Buy & Sell Num" = length(buy_price)))
}else{
buy_price <- follow_closed[buy_idx]
sell_price <- follow_closed[sell_idx2]
EarningRatioSum <- cumsum(sapply(1:length(buy_price), function(x) ((sell_price[x] - buy_price[x]) / buy_price[x]) * 100))[length(buy_price)]
return(list("EarningRatioSum" = EarningRatioSum, "Buy & Sell Num" = length(buy_price)))
}
}
coin_list_MA7 <- dataHandle_with_raw_fixedNum(coin_list, 2, 22, 100)
coin_list3_closed <- dataHandle_with_raw_fixedNum(coin_list, 2, 4, 100)
corr_result <- find_corr_afterHandle_raw_MA7(coin_list_MA7, 30)
sort_corr_result <- corr_result[order(abs(as.numeric(corr_result[,6])), decreasing = T),]
sort_corr_result
allER <- matrix(rep(0,7832*2), 7832,2)
j <- 0
coin_list_closed <- dataHandle_with_raw_fixedNum(coin_list, 2, 4, 100)
allER <- matrix(rep(0,7832*2), 7832,2)
j <- 0
for(i in 1:7832){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
allER[i,1] <- result_set$EarningRatioSum
allER[i,2] <- result_set$`Buy & Sell Num`
}
allER_result <- allER[(is.na(as.numeric(allER[,1])) == F),]
summary(as.numeric(allER_result[,1]))
summary(as.numeric(allER_result[,2]))
summary(as.numeric(allER_result[,1]))
ER1000 <- matrix(rep(0,1000*2), 1000,2)
j <- 0
for(i in 1:1000){
j <- j+1
mydata <- sort_result[i,]
result_set <- meanEarningRatio2(coin_list3[,as.numeric(mydata[3])], coin_list3_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
ER1000[i,1] <- result_set$EarningRatioSum
ER1000[i,2] <- result_set$`Buy & Sell Num`
}
ER1000 <- matrix(rep(0,1000*2), 1000,2)
j <- 0
for(i in 1:1000){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio2(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
ER1000[i,1] <- result_set$EarningRatioSum
ER1000[i,2] <- result_set$`Buy & Sell Num`
}
ER1000 <- matrix(rep(0,1000*2), 1000,2)
j <- 0
for(i in 1:1000){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
ER1000[i,1] <- result_set$EarningRatioSum
ER1000[i,2] <- result_set$`Buy & Sell Num`
}
meanER <- ER1000[(is.na(as.numeric(ER1000[,1])) == F),]
summary(as.numeric(meanER[,1]))
ER1000 <- matrix(rep(0,1000*2), 1000,2)
j <- 0
for(i in 1:1000){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
ER1000[i,1] <- result_set$EarningRatioSum
ER1000[i,2] <- result_set$`Buy & Sell Num`
}
meanER <- ER1000[(is.na(as.numeric(ER1000[,1])) == F),]
summary(as.numeric(meanER[,1]))
as.numeric(meanER)
as.numeric(meanER[,1])
sum(as.numeric(meanER[,1]) < 0)
ark <- rev(coin_list_MA7[,2])
blocknet <- rev(coin_list_MA7[,10])
ark_closed <- rev(coin_list_closed[,2])
blocknet_closed <- rev(coin_list_closed[,10])
par(mfrow=c(2,2))
ts.plot(ark, col = "red", lwd = 2)
par(new=T)
ts.plot(blocknet, col = "blue", lwd = 2)
ts.plot(ark_closed, col = "red", lwd = 2)
par(new=T)
ts.plot(blocknet_closed, col = "blue", lwd = 2)
ts.plot(ark[13:(201)], col = "red", lwd = 2)
par(new=T)
ts.plot(blocknet[1:(201-12)], col = "blue", lwd = 2)
ts.plot(ark_closed[13:201], col = "red", lwd = 2)
par(new=T)
ts.plot(blocknet_closed[1:(201-12)], col = "blue", lwd = 2)
b <- ifelse(diff(blocknet) > 0 ,1,0)
b2 <- c(rep(0,11),sapply(1:(length(b)-11), function(x) sum(b[x:(x+11)])))
colin_list_MA7
coin_list_MA7
ark_MA7 <- rev(coin_list_MA7[,2])
blocknet_MA7 <- rev(coin_list_MA7[,10])
ark_closed <- rev(coin_list_closed[,2])
blocknet_closed <- rev(coin_list_closed[,10])
par(mfrow=c(2,2))
ts.plot(ark_MA7, col = "red", lwd = 2)
par(new=T)
ts.plot(blocknet_MA7, col = "blue", lwd = 2)
ts.plot(ark_closed, col = "red", lwd = 2)
par(new=T)
ts.plot(blocknet_closed, col = "blue", lwd = 2)
ts.plot(ark[13:(201)], col = "red", lwd = 2)
par(new=T)
ts.plot(blocknet[1:(201-12)], col = "blue", lwd = 2)
ts.plot(ark_closed[13:201], col = "red", lwd = 2)
par(new=T)
ts.plot(blocknet_closed[1:(201-12)], col = "blue", lwd = 2)
b <- ifelse(diff(blocknet) > 0 ,1,0)
summary(as.numeric(allER_result[,1]))
sort_corr_result[1000,]
summary(as.numeric(meanER[,1]))
sort_corr_result[500,]
sort_corr_result[400,]
sort_corr_result[300,]
sort_corr_result[350,]
ER350 <- matrix(rep(0,350*2), 350,2)
j <- 0
for(i in 1:350){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
ER350[i,1] <- result_set$EarningRatioSum
ER350[i,2] <- result_set$`Buy & Sell Num`
}
meanER <- ER1000[(is.na(as.numeric(ER1000[,1])) == F),]
meanER <- ER350[(is.na(as.numeric(ER350[,1])) == F),]
summary(as.numeric(meanER[,1]))
summary(as.numeric(meanER[,1]))
summary(as.numeric(allER_result[,1]))
summary(as.numeric(meanER[,1]))
summary(as.numeric(allER_result[,1])) ## 전체
summary(as.numeric(meanER[,1])) ## 1000개
summary(as.numeric(meanER[,1])) ## 350개(0.9이상)
ER1000 <- matrix(rep(0,1000*2), 1000,2)
j <- 0
for(i in 1:1000){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
ER1000[i,1] <- result_set$EarningRatioSum
ER1000[i,2] <- result_set$`Buy & Sell Num`
}
meanER1000 <- ER1000[(is.na(as.numeric(ER1000[,1])) == F),]
summary(as.numeric(meanER1000[,1])) ## 1000개
###
ER350 <- matrix(rep(0,350*2), 350,2)
j <- 0
for(i in 1:350){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
ER350[i,1] <- result_set$EarningRatioSum
ER350[i,2] <- result_set$`Buy & Sell Num`
}
meanER350 <- ER350[(is.na(as.numeric(ER350[,1])) == F),]
summary(as.numeric(meanER350[,1])) ## 350개(0.9이상)
ER1000 <- matrix(rep(0,1000*2), 1000,2)
j <- 0
for(i in 1:1000){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
ER1000[i,1] <- result_set$EarningRatioSum
ER1000[i,2] <- result_set$`Buy & Sell Num`
}
meanER1000 <- ER1000[(is.na(as.numeric(ER1000[,1])) == F),]
ER350 <- matrix(rep(0,350*2), 350,2)
j <- 0
for(i in 1:350){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
ER350[i,1] <- result_set$EarningRatioSum
ER350[i,2] <- result_set$`Buy & Sell Num`
}
allER <- matrix(rep(0,7832*2), 7832,2)
j <- 0
for(i in 1:7832){
j <- j+1
mydata <- sort_corr_result[i,]
result_set <- meanEarningRatio(coin_list_MA7[,as.numeric(mydata[3])], coin_list_closed[,as.numeric(mydata[1])], as.numeric(mydata[5]), corr = as.numeric(mydata[6]))
allER[i,1] <- result_set$EarningRatioSum
allER[i,2] <- result_set$`Buy & Sell Num`
}
allER_result <- allER[(is.na(as.numeric(allER[,1])) == F),]
summary(as.numeric(allER_result[,1])) ## 전체
summary(as.numeric(meanER1000[,1])) ## 1000개
source('~/Desktop/개인 파일/스터디/Coin Project/R Code/Simulation with high correlation lag coin.R', echo=TRUE)
summary(as.numeric(allER_result[,1])) ## 전체
summary(as.numeric(meanER1000[,1])) ## 1000개
summary(as.numeric(meanER350[,1])) ## 350개(0.9이상)
var(as.numeric(allER_result[,1]))
summary(as.numeric(allER_result[,1])) ## 전체
sd(as.numeric(allER_result[,1]))
summary(as.numeric(meanER1000[,1])) ## 1000개
sd(as.numeric(meanER1000[,1]))
summary(as.numeric(meanER350[,1])) ## 350개(0.9이상)
sd(as.numeric(meanER350[,1]))
var(as.numeric(meanER350[,1]))
var(as.numeric(meanER1000[,1]))
var(as.numeric(allER_result[,1]))
?boxplot
boxplot.matrix(as.numeric(meanER350[,1]))
result_mat <- data.frame(allER = as.numeric(allER_result[,1]), meanER1000 = as.numeric(meanER1000[,1]), meanER350 = as.numeric(meanER350[,1]))
summary(as.numeric(meanER350[,1])) ## 350개(0.9이상)
sum(as.numeric(allER_result[,1]))
sum(as.numeric(meanER1000[,1]))
summary(as.numeric(allER_result[,1])) ## 전체
summary(as.numeric(meanER1000[,1])) ## 1000개
summary(as.numeric(meanER350[,1])) ## 350개(0.9이상)
setwd("~/Desktop/개인 파일/스터디/Coin Project/R Code")
require(gtools)
print(summary(as.numeric(allER_result[,1]))) ## 전체
print(summary(as.numeric(allER_result[,1]))) ## 전체
